@using Microsoft.AspNetCore.Components.Web
@typeparam TItem
<div class="dropdown">
    <button class="btn btn-primary dropdown-toggle mr-4" data-toggle="dropdown" type="button" @onclick="e => show=!show " 
            aria-haspopup="true" aria-expanded="false">
        @Tip
    </button>
    <CascadingValue name="Dropdown" Value="@(this)">
        <ul class="dropdown-menu dropdown-menu-end @(show? "show":"")" >
            @ChildContent
        </ul>
    </CascadingValue>
</div>

@code {
    [Parameter]
    public RenderFragment InitialTip{get;set;}
    [Parameter]
    public RenderFragment ChildContent{get;set;}
    [Parameter]
    public EventCallback<TItem> OnSelected {get;set;}

    private bool show = false;
    private RenderFragment Tip ;

    protected override void OnInitialized(){ Tip = InitialTip; }
    public async Task HandleSelect(TItem item, RenderFragment<TItem> contentFragment)
    {
        Tip= contentFragment.Invoke(item);
        show=false;
        StateHasChanged();
        await OnSelected.InvokeAsync(item);
    }
}